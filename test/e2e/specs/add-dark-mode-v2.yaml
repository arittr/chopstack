tasks:
  - id: "theme-context-and-provider"
    title: "Create Theme Context and Provider with localStorage persistence"
    description: "Implement the core theme management system with React Context, supporting light/dark/system modes with localStorage persistence and system preference detection"
    touches: []
    produces:
      - "src/contexts/ThemeContext.tsx"
      - "src/hooks/useTheme.ts"
    requires: []
    estimatedLines: 180
    agentPrompt: "Create the theme management system with the following files:


      1. Create src/contexts/ThemeContext.tsx:

      \   - Define ThemeType as 'light' | 'dark' | 'system'

      \   - Create ThemeContext with state for current theme and resolved theme

      \   - Implement ThemeProvider component that:

      \     * Manages theme state (light/dark/system)

      \     * Persists theme preference to localStorage

      \     * Detects system color scheme using window.matchMedia('(prefers-color-scheme: dark)')

      \     * Listens for system preference changes

      \     * Resolves 'system' to actual light/dark value

      \     * Applies theme by setting data-theme attribute on document.documentElement

      \     * Prevents flash of unstyled content with inline script

      \   - Export ThemeContext and ThemeProvider

      \   - Use proper TypeScript types throughout


      2. Create src/hooks/useTheme.ts:

      \   - Export custom hook that consumes ThemeContext

      \   - Return { theme, resolvedTheme, setTheme } interface

      \   - Throw error if used outside ThemeProvider

      \   - Include proper TypeScript types\n"
  - id: "theme-toggle-component"
    title: "Create ThemeToggle component with accessibility support"
    description: "Build an accessible theme toggle button component with icons for light/dark/system modes and keyboard navigation support"
    touches: []
    produces:
      - "src/components/ThemeToggle.tsx"
      - "src/components/ThemeToggle.module.css"
    requires:
      - "theme-context-and-provider"
    estimatedLines: 120
    agentPrompt: "Create an accessible theme toggle component:


      1. Create src/components/ThemeToggle.tsx:

      \   - Import and use the useTheme hook

      \   - Create a button that cycles through: light -> dark -> system -> light

      \   - Display appropriate icon/text for current theme state

      \   - Include aria-label for accessibility

      \   - Support keyboard navigation (Enter/Space)

      \   - Use simple SVG icons or unicode symbols for sun/moon/auto

      \   - Apply proper TypeScript types


      2. Create src/components/ThemeToggle.module.css:

      \   - Style the toggle button with smooth transitions

      \   - Ensure button is properly sized and positioned

      \   - Add hover and focus states for accessibility

      \   - Use CSS variables for colors to support theming

      \   - Include focus-visible styles for keyboard navigation\n"
  - id: "css-variables-and-dark-mode"
    title: "Update CSS variables system for manual dark mode control"
    description: "Refactor globals.css to support data-theme attribute instead of media queries, ensuring smooth theme transitions and proper color schemes"
    touches:
      - "src/app/globals.css"
    produces: []
    requires: []
    estimatedLines: 80
    agentPrompt: "Update src/app/globals.css to support manual dark mode control:


      1. Restructure CSS variables:

      \   - Keep light theme variables in :root

      \   - Move dark theme variables from @media (prefers-color-scheme: dark) to [data-theme='dark']

      \   - Ensure all color variables are defined for both themes

      \   - Keep existing variable names for compatibility


      2. Add smooth transitions:

      \   - Add transition properties for theme changes on body and key elements

      \   - Use color-scheme CSS property for proper form controls


      3. Handle system preference:

      \   - Add @media (prefers-color-scheme: dark) with :root:not([data-theme]) selector

      \   - This ensures system preference applies when theme is not explicitly set


      4. Maintain existing styles:

      \   - Keep all existing color variables and gradients

      \   - Preserve the gradient backgrounds and glow effects

      \   - Ensure backward compatibility with page.module.css\n"
  - id: "integrate-theme-provider"
    title: "Integrate ThemeProvider into app layout and add toggle to page"
    description: "Wire up the ThemeProvider in the root layout and add the ThemeToggle component to the home page header"
    touches:
      - "src/app/layout.tsx"
      - "src/app/page.tsx"
      - "src/app/page.module.css"
    produces: []
    requires:
      - "theme-context-and-provider"
      - "theme-toggle-component"
    estimatedLines: 40
    agentPrompt: "Integrate the theme system into the application:


      1. Modify src/app/layout.tsx:

      \   - Import ThemeProvider from src/contexts/ThemeContext

      \   - Wrap the <body> children with <ThemeProvider>

      \   - Keep existing Inter font and metadata

      \   - Ensure proper nesting: html > body > ThemeProvider > children


      2. Modify src/app/page.tsx:

      \   - Import ThemeToggle component

      \   - Add ThemeToggle to the .description div (next to the Vercel logo link)

      \   - Position it appropriately in the existing layout


      3. Modify src/app/page.module.css:

      \   - Add styles to position the ThemeToggle in the header

      \   - Ensure it works responsively on mobile and desktop

      \   - Add any necessary layout adjustments for the toggle button placement\n"

# Plan Metrics
# Task Count: 4
# Execution Layers: 3
# Max Parallelization: 2
# Critical Path Length: 340 lines
# Estimated Speedup: 1.24x
# Total Estimated Lines: 420