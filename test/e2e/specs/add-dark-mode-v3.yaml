tasks:
  - id: "theme-types-and-constants"
    title: "Create theme types and constants"
    description: "Define TypeScript types for theme values ('light', 'dark', 'system') and create a constants file for theme-related values"
    touches: []
    produces:
      - "src/lib/theme/types.ts"
      - "src/lib/theme/constants.ts"
    requires: []
    estimatedLines: 40
    agentPrompt: "Create TypeScript types and constants for the dark mode feature:


      1. Create src/lib/theme/types.ts:

      \   - Export a Theme type union: 'light' | 'dark' | 'system'

      \   - Export a ResolvedTheme type union: 'light' | 'dark'

      \   - Export a ThemeContextValue interface with:

      \     - theme: Theme

      \     - resolvedTheme: ResolvedTheme

      \     - setTheme: (theme: Theme) => void


      2. Create src/lib/theme/constants.ts:

      \   - Export THEME_STORAGE_KEY constant for localStorage key

      \   - Export DEFAULT_THEME constant set to 'system'

      \   - Export theme values as constants (LIGHT, DARK, SYSTEM)


      Ensure all exports follow TypeScript best practices with proper typing.\n"
  - id: "theme-hooks"
    title: "Create useTheme and useMediaQuery hooks"
    description: "Implement custom React hooks for theme management and media query detection"
    touches: []
    produces:
      - "src/lib/theme/hooks.ts"
    requires:
      - "theme-types-and-constants"
    estimatedLines: 80
    agentPrompt: "Create src/lib/theme/hooks.ts with two custom hooks:


      1. useMediaQuery hook:

      \   - Accept a media query string parameter

      \   - Use useState and useEffect to track matches

      \   - Return boolean indicating if media query matches

      \   - Handle SSR safely (return false initially)

      \   - Clean up event listeners properly


      2. useTheme hook:

      \   - Import ThemeContextValue from types

      \   - Use React.useContext to access ThemeContext

      \   - Throw error if used outside ThemeProvider

      \   - Return the theme context value


      Ensure hooks follow React best practices with proper TypeScript typing and dependency arrays.\n"
  - id: "theme-context-and-provider"
    title: "Create ThemeContext and ThemeProvider"
    description: "Implement React Context for theme state and ThemeProvider component with localStorage persistence and system preference detection"
    touches: []
    produces:
      - "src/lib/theme/ThemeProvider.tsx"
      - "src/lib/theme/ThemeContext.tsx"
    requires:
      - "theme-types-and-constants"
      - "theme-hooks"
    estimatedLines: 120
    agentPrompt: "Create the theme context and provider:


      1. Create src/lib/theme/ThemeContext.tsx:

      \   - Import ThemeContextValue type

      \   - Create and export ThemeContext with createContext

      \   - Set default value to undefined (will throw if used outside provider)


      2. Create src/lib/theme/ThemeProvider.tsx:

      \   - Import necessary types, constants, and hooks

      \   - Accept children prop

      \   - Use useState for theme state (default from localStorage or DEFAULT_THEME)

      \   - Use useMediaQuery to detect system preference

      \   - Calculate resolvedTheme based on theme and system preference

      \   - Use useEffect to:

      \     - Apply data-theme attribute to document.documentElement

      \     - Persist theme to localStorage

      \     - Listen for system preference changes

      \   - Implement setTheme function

      \   - Provide context value with theme, resolvedTheme, setTheme

      \   - Handle SSR safely (check typeof window)


      Ensure proper cleanup of effects and type safety throughout.\n"
  - id: "theme-toggle-component"
    title: "Create ThemeToggle component"
    description: "Build an accessible theme toggle button component with icons and keyboard support"
    touches: []
    produces:
      - "src/components/ThemeToggle.tsx"
      - "src/components/ThemeToggle.module.css"
    requires:
      - "theme-context-and-provider"
    estimatedLines: 90
    agentPrompt: "Create an accessible theme toggle component:


      1. Create src/components/ThemeToggle.tsx:

      \   - Import useTheme hook

      \   - Create ThemeToggle functional component

      \   - Display button that cycles through: light ‚Üí dark ‚Üí system

      \   - Show appropriate icon/text for current theme (‚òÄÔ∏è Light, üåô Dark, üíª System)

      \   - Add proper ARIA labels for accessibility

      \   - Handle keyboard navigation (Enter and Space)

      \   - Include title attribute for tooltip

      \   - Apply CSS module styles


      2. Create src/components/ThemeToggle.module.css:

      \   - Style the toggle button with:

      \     - Transparent background

      \     - Border and hover states

      \     - Cursor pointer

      \     - Padding and border-radius

      \     - Transition effects

      \     - Focus visible styles for accessibility

      \   - Use CSS variables for colors that adapt to theme

      \   - Ensure button is at least 44x44px for touch targets


      Follow accessibility best practices (WCAG 2.1 AA).\n"
  - id: "theme-css-variables"
    title: "Update CSS variables for dynamic theming"
    description: "Refactor globals.css to use data-theme attribute selectors instead of prefers-color-scheme media queries"
    touches:
      - "src/app/globals.css"
    produces: []
    requires:
      - "theme-types-and-constants"
    estimatedLines: 60
    agentPrompt: "Update src/app/globals.css to support controlled theme switching:


      1. Keep existing :root CSS variables as light theme defaults


      2. Replace the @media (prefers-color-scheme: dark) block with:

      \   - [data-theme=\"dark\"] selector

      \   - Move all dark theme variables inside this selector


      3. Add smooth transition for theme changes:

      \   - Add transition property to * selector for background-color, color, border-color

      \   - Use transition duration of 200ms with ease timing


      4. Add [data-theme=\"system\"] support:

      \   - Use @media (prefers-color-scheme: dark) nested inside [data-theme=\"system\"]

      \   - Apply dark theme variables when system preference is dark


      5. Update the html color-scheme property:

      \   - Set color-scheme: light for [data-theme=\"light\"]

      \   - Set color-scheme: dark for [data-theme=\"dark\"]

      \   - Set color-scheme: light dark for [data-theme=\"system\"]


      Ensure no visual regressions and maintain existing color values.\n"
  - id: "update-page-module-css"
    title: "Update page.module.css for theme support"
    description: "Ensure page component styles work correctly with both themes by verifying CSS variable usage"
    touches:
      - "src/app/page.module.css"
    produces: []
    requires:
      - "theme-css-variables"
    estimatedLines: 15
    agentPrompt: "Review and update src/app/page.module.css:


      1. Verify all color values use CSS variables from globals.css

      2. Remove the @media (prefers-color-scheme: dark) block at the bottom (lines 206-214)

      3. Replace with [data-theme=\"dark\"] selector:

      \   - Move .vercelLogo filter: invert(1)

      \   - Move .logo filter with drop-shadow

      4. Add [data-theme=\"system\"] @media (prefers-color-scheme: dark) with same styles


      Ensure images and logos display correctly in both themes.\n"
  - id: "theme-barrel-export"
    title: "Create theme module barrel export"
    description: "Create an index.ts file to export all theme-related modules for cleaner imports"
    touches: []
    produces:
      - "src/lib/theme/index.ts"
    requires:
      - "theme-context-and-provider"
      - "theme-hooks"
    estimatedLines: 15
    agentPrompt: "Create src/lib/theme/index.ts as a barrel export:


      1. Export all types from './types'

      2. Export all constants from './constants'

      3. Export ThemeProvider from './ThemeProvider'

      4. Export ThemeContext from './ThemeContext'

      5. Export useTheme hook from './hooks'

      6. Export useMediaQuery hook from './hooks' (if needed externally)


      Use named exports for clarity. This allows consumers to import from '@/lib/theme' instead of deep paths.\n"
  - id: "integrate-theme-provider"
    title: "Integrate ThemeProvider into root layout"
    description: "Wrap the application with ThemeProvider in the root layout and add ThemeToggle to the page"
    touches:
      - "src/app/layout.tsx"
      - "src/app/page.tsx"
    produces: []
    requires:
      - "theme-context-and-provider"
      - "theme-toggle-component"
      - "theme-barrel-export"
    estimatedLines: 25
    agentPrompt: "Integrate the theme system into the application:


      1. Update src/app/layout.tsx:

      \   - Import ThemeProvider from '@/lib/theme'

      \   - Wrap {children} with <ThemeProvider>

      \   - Keep existing html lang=\"en\" and body className

      \   - Ensure ThemeProvider is inside <body> but wraps {children}


      2. Update src/app/page.tsx:

      \   - Import ThemeToggle from '@/components/ThemeToggle'

      \   - Add ThemeToggle component in the description div (top-right area)

      \   - Position it next to the Vercel logo for visibility

      \   - Ensure it doesn't break existing layout


      The theme system should now be fully functional with toggle button visible on the homepage.\n"
  - id: "add-theme-documentation"
    title: "Add theme usage documentation"
    description: "Create a README documenting the dark mode implementation and usage"
    touches: []
    produces:
      - "src/lib/theme/README.md"
    requires:
      - "integrate-theme-provider"
    estimatedLines: 80
    agentPrompt: "Create src/lib/theme/README.md with comprehensive documentation:


      1. Overview section:

      \   - Explain the dark mode implementation

      \   - List supported themes (light, dark, system)

      \   - Mention persistence and system preference detection


      2. Usage section:

      \   - Show how to use the useTheme hook in components

      \   - Provide code examples for accessing theme and setTheme

      \   - Explain ThemeProvider setup (already done in layout)


      3. Architecture section:

      \   - Explain the file structure

      \   - Document ThemeContext, ThemeProvider, hooks

      \   - Explain CSS variable approach


      4. Customization section:

      \   - How to modify theme colors in globals.css

      \   - How to add new CSS variables

      \   - How to create custom theme-aware components


      5. Accessibility section:

      \   - Mention WCAG compliance

      \   - Explain keyboard navigation support

      \   - Note proper ARIA labels


      Use clear markdown formatting with code examples.\n"
  - id: "verify-theme-system"
    title: "Verification and testing checklist"
    description: "Manual testing checklist to verify all dark mode functionality works correctly"
    touches: []
    produces:
      - "DARK_MODE_VERIFICATION.md"
    requires:
      - "integrate-theme-provider"
    estimatedLines: 60
    agentPrompt: "Create DARK_MODE_VERIFICATION.md in the project root with a testing checklist:


      1. Functionality tests:

      \   - [ ] Theme toggle button is visible on homepage

      \   - [ ] Clicking toggle cycles through light ‚Üí dark ‚Üí system

      \   - [ ] Theme preference persists after page reload

      \   - [ ] System theme detection works correctly

      \   - [ ] Theme changes when system preference changes

      \   - [ ] No flash of unstyled content (FOUC) on page load


      2. Visual tests:

      \   - [ ] All text is readable in both themes

      \   - [ ] Proper contrast ratios maintained

      \   - [ ] Images/logos display correctly in both themes

      \   - [ ] Smooth transitions between themes

      \   - [ ] No layout shifts during theme change

      \   - [ ] Hover states work in both themes


      3. Accessibility tests:

      \   - [ ] Theme toggle is keyboard accessible (Tab, Enter, Space)

      \   - [ ] Proper focus indicators visible

      \   - [ ] ARIA labels are present and descriptive

      \   - [ ] Screen reader announces theme changes

      \   - [ ] Color contrast meets WCAG AA standards


      4. Technical tests:

      \   - [ ] localStorage correctly stores theme preference

      \   - [ ] No console errors or warnings

      \   - [ ] TypeScript compilation succeeds

      \   - [ ] No unnecessary re-renders


      Include instructions for running each test.\n"

# Plan Metrics
# Task Count: 10
# Execution Layers: 6
# Max Parallelization: 2
# Critical Path Length: 435 lines
# Estimated Speedup: 1.34x
# Total Estimated Lines: 585