---
alwaysApply: true
---
# Additional Conventions Beyond the Built-in Functions

As this project's AI coding tool, you must follow the additional conventions below, in addition to the built-in functions.

## Simulated Custom Slash Commands

Custom slash commands allow you to define frequently-used prompts as Markdown files that you can execute.

### Syntax

Users can use following syntax to invoke a custom command.

```txt
s/<command> [arguments]
```

This syntax employs a double slash (`s/`) to prevent conflicts with built-in slash commands.  
The `s` in `s/` stands for *simulate*. Because custom slash commands are not built-in, this syntax provides a pseudo way to invoke them.

When users call a custom slash command, you have to look for the markdown file, `.cursor/commands/{command}.md`, then execute the contents of that file as the block of operations.

## Simulated Subagents

Simulated subagents are specialized AI assistants that can be invoked to handle specific types of tasks. In this case, it can be appear something like custom slash commands simply. Simulated subagents can be called by custom slash commands.

When users call a simulated subagent, it will look for the corresponding markdown file, `.cursor/subagents/{subagent}.md`, and execute its contents as the block of operations.

For example, if the user instructs `Call planner subagent to plan the refactoring`, you have to look for the markdown file, `.cursor/subagents/planner.md`, and execute its contents as the block of operations.
