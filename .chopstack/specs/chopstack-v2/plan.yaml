# Chopstack v2.0.0 - Phase 1 & 2 Execution Plan
#
# PROCESS GUARDRAILS (Critical for Success):
#
# 1. ANALYZE PHASE - Resolve Open Questions BEFORE Decomposition
#    - Run `chopstack analyze` to identify gaps and open questions
#    - Document ALL open questions in spec.md "Open Tasks/Questions"
#    - Complete required audits (e.g., v1 type usage count by module)
#    - Re-analyze until 100% complete with 0 open questions
#    - GATE: Open Questions = 0 ✓ → proceed to decomposition
#
# 2. DECOMPOSE PHASE - Two-Step Validation
#
#    PRE-GENERATION GATE (Before decomposing):
#    - `chopstack decompose` MUST check spec for "Open Tasks/Questions" section
#    - If section exists with unresolved items → BLOCK decomposition
#    - ERROR: "Cannot decompose until open questions resolved"
#    - User resolves questions, removes from spec, re-runs decompose
#
#    POST-GENERATION VALIDATION (After decomposing):
#    - Automatic quality validation runs on generated plan.yaml
#    - Fix CRITICAL/HIGH issues before execution:
#      * Split XL tasks into M/L tasks
#      * Clarify vague file patterns
#      * Break down migration tasks by module
#    - GATE: Quality validated ✓ → plan is execution-ready
#
# This plan demonstrates the corrected process:
# - Prerequisites resolved (v1 audit documented in spec.md)
# - Clear phase separation (Foundation vs Migration)
# - Task quality validated (1 XL justified, 0 XS, mostly M)
# - No task duplication across phases
# - Explicit file ownership per task

name: Chopstack v2.0.0 - Phase-Based Task Decomposition
description: |
  Transform chopstack from a basic task decomposition tool into an intelligent,
  specification-driven workflow system.

  This plan demonstrates the process we went through:
  - Open questions identified during analysis and resolved before decompose
  - Task quality validation ran after plan generation
  - XL tasks flagged and either split or justified
  - T-shirt size complexity (XS|S|M|L|XL) instead of hour estimates
  - Clear phase hierarchy with parallelization opportunities

specification: spec.md
codebase: codebase.md
mode: plan
strategy: phased-parallel

phases:
  # ===========================================================================
  # PHASE 1: Type System Foundation
  # ===========================================================================
  - id: phase-1-foundation
    name: Type System Foundation
    strategy: sequential
    tasks:
      - task-1-1-create-v2-type-schemas
      - task-1-2-create-analysis-type-schemas
      - task-1-3-create-agent-interface
    complexity: XL + L + M = Very Large Phase
    notes: |
      Sequential foundation work only. No migration yet.
      Creates new type system that will replace v1 types.

      Task complexity breakdown: 1 XL, 1 L, 1 M (should consider splitting XL task)

      NOTE: v1 type usage audit must be completed BEFORE this plan is executed.
      See specs/chopstack-v2/spec.md "Open Tasks/Questions" section for audit requirements.

  # ===========================================================================
  # PHASE 2: Type Migration
  # ===========================================================================

  # Phase 2.1: Prework (parallel independent tasks)
  - id: phase-2-1-migration-prework
    name: Type Migration - Prework (Parallel)
    strategy: parallel
    tasks:
      - task-2-1-migrate-agent-implementations
      - task-2-2-migrate-parsers-and-validators
      - task-2-3-migrate-plan-outputter
    complexity: M + M + S = Medium-Large (parallelizable)
    requires: [phase-1-foundation]
    notes: |
      Independent migrations that can run in parallel.
      Each focuses on specific modules with clear boundaries.

  # Phase 2.2: Infrastructure (sequential, enables next steps)
  - id: phase-2-2-migration-infrastructure
    name: Type Migration - Infrastructure
    strategy: sequential
    tasks:
      - task-2-4-migrate-execution-infrastructure
    complexity: M = Medium (critical path bottleneck)
    requires: [phase-2-1-migration-prework]
    notes: |
      Must complete before mode handlers, TUI, and CLI can migrate.
      Creates foundation for dependent modules.

  # Phase 2.3: Dependent modules (parallel)
  - id: phase-2-3-migration-parallel
    name: Type Migration - Dependent Modules (Parallel)
    strategy: parallel
    tasks:
      - task-2-5-migrate-mode-handlers
      - task-2-6-migrate-tui-components
      - task-2-7-migrate-cli-commands
    complexity: M + M + M = Large (parallelizable)
    requires: [phase-2-2-migration-infrastructure]
    notes: |
      These modules depend on execution infrastructure.
      Can run in parallel once foundation is ready.

  # Phase 2.4: Finalization (sequential)
  - id: phase-2-4-migration-finalize
    name: Type Migration - Finalize
    strategy: sequential
    tasks:
      - task-2-8-update-test-files
      - task-2-9-remove-v1-type-files
      - task-2-10-validation-and-cleanup
    complexity: L + S + M = Large Phase
    requires: [phase-2-3-migration-parallel]
    notes: |
      Sequential cleanup, removal, and validation.
      Ensures all migration work is complete and verified.

tasks:
  # ===========================================================================
  # PHASE 1: Type System Foundation
  # ===========================================================================

  - id: task-1-1-create-v2-type-schemas
    name: Create v2 Type Schemas
    complexity: XL  # Should be split into smaller tasks
    description: |
      Define Zod schemas as single source of truth for v2 types.

      Deliverables:
      - src/types/schemas-v2.ts with all core schemas
      - phaseSchema - Phase definition with strategy, tasks, dependencies
      - taskV2Schema - Enhanced task with complexity field (XS|S|M|L|XL)
      - successMetricsSchema - Quantitative/qualitative metrics
      - planSchemaV2 - Complete plan with phases
      - executionContextSchema - Spec injection context
      - Export inferred TypeScript types: Phase, TaskV2, PlanV2, ExecutionContext
      - Comprehensive unit tests (20+ tests)
      - 100% test coverage

      Field changes from v1:
      - title → name
      - touches + produces → files
      - requires → dependencies
      - estimatedLines → complexity (XS|S|M|L|XL)
      - Added: acceptance_criteria

      Implementation details:
      - Cross-validation: phase tasks reference existing task IDs
      - TypeScript types inferred via z.infer<>
      - No any types
      - Helpful error messages in schemas
      - TSDoc comments with usage examples

      NOTE: This task is XL and should ideally be split, but kept together
      as foundation work to establish the complete type system at once.
    files:
      - src/types/schemas-v2.ts
      - src/types/__tests__/schemas-v2.test.ts
    acceptance_criteria:
      - All schemas defined with comprehensive validation
      - Cross-validation working (phase → task references)
      - TypeScript types inferred via z.infer<>
      - No any types
      - 100% test coverage for schemas
      - All tests pass
      - TSDoc comments on all exports
      - Helpful validation error messages

  - id: task-1-2-create-analysis-type-schemas
    name: Create Analysis Type Schemas
    description: |
      Define codebase and specification analysis types.

      Deliverables:
      - CodebaseAnalysis - Flexible, agent-driven codebase findings
      - AnalysisReport - Spec completeness validation results
      - Gap - Gap finding with severity categorization
      - RemediationStep - Prioritized fix actions
      - ValidationFinding - Cross-artifact analysis findings
      - ProjectPrinciples - Discovered from CLAUDE.md, .cursorrules
      - Comprehensive test coverage (15+ tests)

      Implementation details:
      - Analysis schemas support agent freeform discoveries
      - Severity-based gap categorization (CRITICAL/HIGH/MEDIUM/LOW)
      - Extensible structure with [key: string]: unknown
      - Clear type boundaries
    files:
      - src/types/schemas-v2.ts
      - src/types/__tests__/schemas-v2.test.ts
    dependencies:
      - task-1-1-create-v2-type-schemas
    acceptance_criteria:
      - Analysis schemas support agent freeform discoveries
      - Severity-based gap categorization (CRITICAL/HIGH/MEDIUM/LOW)
      - Extensible structure with [key: string]: unknown
      - Comprehensive test coverage
      - All tests pass
    complexity: L  # Large task, 8+ schemas with validation

  - id: task-1-3-create-agent-interface
    name: Create Agent Interface
    description: |
      Define unified agent interface for multi-agent support.

      Interface:
      export interface Agent {
        decompose(prompt: string, cwd: string, options: DecomposeOptions): Promise<PlanV2>;
        execute(prompt: string, files: string[], cwd: string): Promise<TaskResult>;
        validate(prompt: string, criteria: string[], cwd: string): Promise<ValidationResult>;
      }

      Deliverables:
      - Agent interface in src/types/agent.ts
      - DecomposeOptions, TaskResult, ValidationResult types
      - Test suite validates contract compliance (10+ tests)
    files:
      - src/types/agent.ts
      - src/types/__tests__/agent.test.ts
    dependencies:
      - task-1-1-create-v2-type-schemas
    acceptance_criteria:
      - Single interface supports Claude, Codex, Mock implementations
      - Clear contracts for decompose, execute, validate
      - Result types fully typed
      - Test suite validates contract compliance
      - All tests pass
    complexity: M  # Medium-sized interface definition task

  # ===========================================================================
  # PHASE 2: Type Migration (broken down properly)
  # ===========================================================================
  #
  # NOTE: Phase 2 tasks assume the v1 type audit has been completed.
  # See specs/chopstack-v2/spec.md "Open Tasks/Questions" section.
  # The audit informs task breakdown and complexity estimates.

  # Phase 2.1: Prework (Parallel)

  - id: task-2-1-migrate-agent-implementations
    name: Migrate Agent Implementations to v2
    description: |
      Update all agent implementations to use v2 Agent interface.

      Changes:
      - Import Agent interface from types/agent.ts
      - Update decompose() signature to return PlanV2
      - Update all type references: Task → TaskV2, Plan → PlanV2
      - Field mappings: title → name, touches/produces → files, etc.
      - Update tests to use v2 types

      Files to update:
      - claude-agent.ts: Update decompose implementation
      - mock-agent.ts: Update mock data structure
      - codex-agent.ts: Update if still in use
      - All agent tests

      Implementation:
      - Use find/replace for field renames
      - Update Zod parsing to use v2 schemas
      - Verify agent tests pass
    files:
      - src/agents/claude-agent.ts
      - src/agents/mock-agent.ts
      - src/agents/codex-agent.ts
      - src/agents/__tests__/*.test.ts
    dependencies:
      - task-1-1-create-v2-type-schemas
      - task-1-3-create-agent-interface
    acceptance_criteria:
      - All agents implement v2 Agent interface
      - decompose() returns PlanV2
      - No v1 type imports in agent files
      - All agent tests pass
      - TypeScript compiles with no errors
    complexity: M  # 3 agent files + tests, straightforward migration

  - id: task-2-2-migrate-parsers-and-validators
    name: Migrate Parsers and Validators to v2
    description: |
      Update YAML parser, agent validator, and DAG validator to use v2 types.

      Changes for yaml-parser.ts:
      - Import PlanV2, TaskV2 from schemas-v2
      - Update parsePlan() return type to PlanV2
      - Update field parsing: title → name, etc.
      - Update tests

      Changes for agent-validator.ts:
      - Update supported agent types (include 'Codex')
      - Validate against v2 Agent interface
      - Update tests

      Changes for dag-validator.ts:
      - Import TaskV2, PlanV2
      - Update validatePlan() signature
      - Update field accesses: task.touches → task.files
      - Update tests

      Implementation:
      - Systematic field rename
      - Update all type annotations
      - Verify validator tests pass
    files:
      - src/parser/yaml-parser.ts
      - src/parser/__tests__/yaml-parser.test.ts
      - src/utils/agent-validator.ts
      - src/utils/__tests__/agent-validator.test.ts
      - src/validation/dag-validator.ts
      - src/validation/__tests__/dag-validator.test.ts
    dependencies:
      - task-1-1-create-v2-type-schemas
      - task-1-3-create-agent-interface
    acceptance_criteria:
      - Parsers return v2 types
      - Validators accept v2 types
      - No v1 type imports
      - All tests pass
      - TypeScript compiles with no errors
    complexity: M  # 3 core files (parser, 2 validators) + tests

  - id: task-2-3-migrate-plan-outputter
    name: Migrate Plan Outputter to v2
    description: |
      Update PlanOutputter to work with PlanV2.

      Changes:
      - Import PlanV2, TaskV2 from schemas-v2
      - Update outputPlan() signature to accept PlanV2
      - Update YAML output format for v2 fields
      - Handle new fields: acceptance_criteria, estimated_hours
      - Update field names in output: title → name, etc.
      - Update tests

      Implementation:
      - Update YAML serialization
      - Add support for new v2 fields
      - Ensure backward-compatible output where possible
      - Verify output tests pass
    files:
      - src/services/planning/plan-outputter.ts
      - src/services/planning/__tests__/plan-outputter.test.ts
    dependencies:
      - task-1-1-create-v2-type-schemas
    acceptance_criteria:
      - Accepts PlanV2 as input
      - Outputs correct YAML with v2 field names
      - Handles all new v2 fields
      - No v1 type imports
      - All tests pass
      - TypeScript compiles with no errors
    complexity: S  # Single file update, well-defined scope

  # Phase 2.2: Infrastructure (Sequential)

  - id: task-2-4-migrate-execution-infrastructure
    name: Migrate Execution Orchestrator and Engine
    description: |
      Update core execution infrastructure to use v2 types.

      Changes for execution-orchestrator.ts:
      - Import TaskV2, PlanV2 from schemas-v2
      - Update executeTask() to accept TaskV2
      - Update all task field accesses
      - Update method signatures
      - Update tests

      Changes for execution-engine.ts:
      - Import TaskV2, PlanV2
      - Update execute() signature
      - Update task processing logic
      - Field mappings: task.title → task.name, etc.
      - Update tests

      Implementation:
      - Systematic type updates
      - Update all internal methods
      - Verify execution tests pass
      - Ensure no v1 types remain
    files:
      - src/services/orchestration/execution-orchestrator.ts
      - src/services/orchestration/__tests__/execution-orchestrator.test.ts
      - src/services/execution/execution-engine.ts
      - src/services/execution/__tests__/execution-engine.test.ts
    dependencies:
      - task-2-1-migrate-agent-implementations
      - task-2-2-migrate-parsers-and-validators
      - task-2-3-migrate-plan-outputter
    acceptance_criteria:
      - Orchestrator uses TaskV2/PlanV2
      - Engine uses TaskV2/PlanV2
      - All method signatures updated
      - No v1 type imports
      - All tests pass
      - TypeScript compiles with no errors
    complexity: M  # 2 core infrastructure files, dependencies on other modules

  # Phase 2.3: Dependent Modules (Parallel)

  - id: task-2-5-migrate-mode-handlers
    name: Migrate Mode Handlers to v2
    description: |
      Update plan, execute, and validate mode handlers to use v2 types.

      Changes for plan-mode-handler.ts:
      - Import TaskV2 from schemas-v2
      - Update handle() signature to accept TaskV2[]
      - Update field accesses: task.title → task.name, etc.
      - Add _generateAgentPrompt() helper for v2 fields
      - Update tests

      Changes for execute-mode-handler.ts:
      - Same updates as plan-mode-handler
      - Update execution logic for v2 fields
      - Update tests

      Changes for validate-mode-handler.ts:
      - Update to use PlanV2
      - Update validation logic
      - Update tests

      Implementation:
      - Update each handler systematically
      - Add helpers for v2-specific fields
      - Use isNonNullish() guard for optional fields
      - Verify all mode handler tests pass
    files:
      - src/services/execution/modes/plan-mode-handler.ts
      - src/services/execution/modes/__tests__/plan-mode-handler.test.ts
      - src/services/execution/modes/execute-mode-handler.ts
      - src/services/execution/modes/__tests__/execute-mode-handler.test.ts
      - src/services/execution/modes/validate-mode-handler.ts
      - src/services/execution/modes/__tests__/validate-mode-handler.test.ts
    dependencies:
      - task-2-4-migrate-execution-infrastructure
    acceptance_criteria:
      - All mode handlers use TaskV2/PlanV2
      - Field accesses updated correctly
      - Helper methods added for v2 fields
      - No v1 type imports
      - All tests pass
      - TypeScript compiles with no errors
    complexity: M  # 3 mode handler files with similar patterns

  - id: task-2-6-migrate-tui-components
    name: Migrate TUI Components to v2
    description: |
      Update TUI components to display v2 task/plan information.

      Changes for StatusPanel.tsx:
      - Import TaskV2, PlanV2
      - Update props to accept v2 types
      - Update field displays: task.title → task.name
      - Update tests

      Changes for ExecutionView.tsx:
      - Update to use TaskV2
      - Update task rendering
      - Update tests

      Changes for phase-tui.ts:
      - Update to use PlanV2 with phases
      - Update phase rendering logic
      - Update tests

      Implementation:
      - Update component props
      - Update JSX to use v2 field names
      - Verify TUI renders correctly
      - Ensure tests pass
    files:
      - src/ui/components/StatusPanel.tsx
      - src/ui/components/__tests__/StatusPanel.test.tsx
      - src/ui/components/ExecutionView.tsx
      - src/ui/components/__tests__/ExecutionView.test.tsx
      - src/ui/phase-tui.ts
      - src/ui/__tests__/phase-tui.test.ts
    dependencies:
      - task-2-4-migrate-execution-infrastructure
    acceptance_criteria:
      - All UI components use TaskV2/PlanV2
      - Field displays updated correctly
      - No v1 type imports
      - All tests pass
      - TypeScript compiles with no errors
      - TUI renders correctly (manual verification)
    complexity: M  # 3 UI components + visual verification needed

  - id: task-2-7-migrate-cli-commands
    name: Migrate CLI Commands to v2
    description: |
      Update CLI command implementations to use v2 types.

      Changes for decompose-command.ts:
      - Import PlanV2 from schemas-v2
      - Update agent calls to expect PlanV2
      - Update field accesses
      - Update tests

      Changes for run-command.ts:
      - Import PlanV2, TaskV2
      - Update plan loading
      - Update execution calls
      - Update tests

      Changes for stack-command.ts:
      - Update if affected by type changes
      - Update tests

      Implementation:
      - Update command signatures
      - Update internal logic
      - Verify CLI commands work correctly
      - Ensure tests pass
    files:
      - src/commands/decompose/decompose-command.ts
      - src/commands/decompose/__tests__/decompose-command.test.ts
      - src/commands/run/run-command.ts
      - src/commands/run/__tests__/run-command.test.ts
      - src/commands/stack/stack-command.ts
      - src/commands/stack/__tests__/stack-command.test.ts
    dependencies:
      - task-2-4-migrate-execution-infrastructure
    acceptance_criteria:
      - All CLI commands use v2 types
      - Commands execute successfully
      - No v1 type imports
      - All tests pass
      - TypeScript compiles with no errors
      - Manual smoke tests pass
    complexity: M  # 3 CLI command files + smoke testing

  # Phase 2.4: Finalization (Sequential)

  - id: task-2-8-update-test-files
    name: Update Test Files for v2 Types
    description: |
      Update all remaining test files to use v2 types.

      Affected test files (from audit):
      - src/services/execution/modes/__tests__/execute-mode-handler.integration.test.ts
      - src/services/vcs/__tests__/parallel-execution.integration.test.ts
      - src/services/vcs/__tests__/stacking-integration.test.ts
      - src/commands/run/__tests__/run.integration.test.ts
      - test/e2e/chopstack-e2e.test.ts
      - src/types/__tests__/agent.test.ts (if not done in 2-1)
      - Any other test files using v1 types

      Changes:
      - Import v2 types
      - Update test data to use v2 field names
      - Update assertions
      - Remove any v1 type references
      - Verify all tests pass

      Implementation:
      - Systematic update of each test file
      - Create helper functions for v2 test data
      - Ensure 100% test pass rate
    files:
      - src/**/__tests__/**/*.test.ts (all remaining)
      - test/e2e/**/*.test.ts (all remaining)
    dependencies:
      - task-2-5-migrate-mode-handlers
      - task-2-6-migrate-tui-components
      - task-2-7-migrate-cli-commands
    acceptance_criteria:
      - All test files use v2 types
      - No v1 type imports in tests
      - 100% test pass rate
      - TypeScript compiles with no errors
      - Test coverage maintained or improved
    complexity: L  # Many test files across codebase, systematic but large

  - id: task-2-9-remove-v1-type-files
    name: Remove v1 Type Files
    description: |
      Delete v1 type definitions and clean up exports.

      Changes:
      - Remove src/types/decomposer.ts
      - Update src/types/index.ts to export only v2 types
      - Update package.json exports if needed
      - Verify no references to v1 types remain
      - Run full test suite

      Verification:
      - grep -r "from '@/types/decomposer'" src/ (should be empty)
      - grep -r "import.*decomposer" src/ (should be empty)
      - All tests pass
      - Build succeeds
    files:
      - src/types/decomposer.ts (DELETE)
      - src/types/index.ts
      - package.json
    dependencies:
      - task-2-8-update-test-files
    acceptance_criteria:
      - decomposer.ts deleted
      - No references to v1 types in codebase
      - No imports from decomposer.ts
      - Build succeeds
      - All tests pass
      - Package exports updated
    complexity: S  # File deletion + verification, straightforward

  - id: task-2-10-validation-and-cleanup
    name: Type Migration Validation and Cleanup
    description: |
      Comprehensive testing and validation of v2 type system.

      Tasks:
      - Run full test suite (pnpm test)
      - Run linter (pnpm lint:fix)
      - Run type checker (pnpm type-check)
      - Manual smoke testing of all commands
      - Verify no v1 types remain anywhere
      - Check for any type assertions that could be improved
      - Review error messages for clarity
      - Performance check (no regression)

      Validation checklist:
      - ✅ 100% test pass rate
      - ✅ 0 ESLint errors/warnings
      - ✅ 0 TypeScript errors
      - ✅ No any types in production code
      - ✅ All v1 types removed
      - ✅ Smoke tests pass for all commands
      - ✅ No performance regression
    files:
      - All source files (verification only)
    dependencies:
      - task-2-9-remove-v1-type-files
    acceptance_criteria:
      - 100% test pass rate (all 136+ tests)
      - 0 ESLint errors/warnings
      - 0 TypeScript errors
      - No any types in production code
      - All v1 types removed (grep verification)
      - Smoke tests pass
      - No performance regression
      - Documentation updated if needed
    complexity: M  # Comprehensive validation across entire codebase

# Task Complexity Summary (T-shirt sizes: XS | S | M | L | XL)
# Sizes: XS < 1h, S = 1-2h, M = 2-4h, L = 4-8h, XL > 8h
# Rules: XS tasks should be folded into larger tasks, XL tasks should be split

complexity_breakdown:
  phase_1:
    - XL: 1 task (task-1-1, should be split but kept for foundation cohesion)
    - L: 1 task (task-1-2)
    - M: 1 task (task-1-3)
    total: "XL + L + M = Very Large Phase (consider splitting XL)"

  phase_2:
    - XL: 0 tasks ✓
    - L: 2 tasks (task-2-8 test updates, large but well-scoped)
    - M: 7 tasks (good granularity)
    - S: 2 tasks (task-2-3, task-2-9)
    - XS: 0 tasks ✓
    total: "Mostly M and L tasks, good distribution"

  overall:
    - 1 XL (needs justification or split)
    - 2 L (acceptable for specific cases like test updates)
    - 8 M (ideal granularity)
    - 2 S (good for quick tasks)
    - 0 XS (correctly folded into larger tasks)

parallelization_opportunities:
  - Phase 2.1: 3 tasks in parallel (M + M + S)
  - Phase 2.3: 3 tasks in parallel (M + M + M)
  - Significant time savings from parallel execution

acceptance_criteria:
  # Prerequisites (must be completed before plan execution)
  - v1 type usage audit completed (see spec.md "Open Tasks/Questions")
  - Migration complexity estimated per module
  - Task breakdown validated against audit findings

  # Phase 1: Foundation
  - All v2 schemas created with comprehensive validation
  - All v2 types exported and documented
  - Agent interface supports Claude, Codex, Mock

  # Phase 2: Migration
  - All modules migrated to v2 types
  - No v1 type imports remain
  - All tests pass (136+ tests)
  - 0 TypeScript errors
  - 0 ESLint errors/warnings
  - No any types in production code
  - Manual smoke tests pass for all commands
  - No performance regression

success_metrics:
  quantitative:
    - Test coverage: 95%+ maintained
    - Type safety: 0 any types in production code
    - Performance: No regression (< 5ms overhead)
    - Code quality: 0 ESLint violations, 0 TS warnings
  qualitative:
    - Clear migration path with explicit steps
    - Well-scoped tasks (3-8 hours each)
    - Parallelization opportunities identified
    - No task duplication across phases
    - Task quality validation catches issues early
